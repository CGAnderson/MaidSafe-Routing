package maidsafe.routing.protobuf;

message Layer {
  required int32 identifier = 1;
  required bytes message = 2;
}

message Endpoint {
  required bytes ip = 1;
  required int32 port = 2;
}

message Contact {
  required bytes node_id = 1;
  repeated Endpoint endpoint = 2;
  optional bool tcp = 3;
}

message ConfigFile {
  optional bytes node_id = 1;
  optional bytes private_key = 2; 
}

message BootstrapContacts {
  required bytes node_id = 1;
  required bytes public_key = 2;
  required Endpoint endpoint = 3;
}

// contacts file
message Bootstrap { 
  repeated BootstrapContacts bootstrap_contacts = 1;
}

// Message wrappers 


message Message {
  required bytes source_id = 1; // in response this is name of data
  required bytes destination_id = 2; // in request (except direct) this is the name of the data
  required bool cacheable = 3;
  required bytes data = 4; // serialised protobuf - possibly encrypted in upper layers
  required bool direct = 5; // goes to a si node !! if proxy is set then to here then we transmit to endpoint
  required bool response = 6;
  required int32 replication = 7;
  required int32 type = 8; // type of data - used in signal to upper layers with (type, data)
  required bool routing_failure = 9;
  required int32 id = 10;
}

message SignedMessage {
  required bytes message = 1; // serialised Message
  required bytes signature = 2;
  required bytes id = 3;
}

message ConnectRequest {
  required Contact contact = 1;
  optional bool client = 2;
  optional bool bootstrap = 3;
}

message ConnectResponse {
  required bool answer = 1;
  optional Contact contact = 2;
  optional Endpoint seen_endpoint = 3;
  optional FindNodesResponse find_nodes = 4;  // if connect request is bootstrap
}

message FindNodesRequest {
  optional int32 num_nodes_requested = 1;
}

message FindNodesResponse {
  repeated bytes nodes = 1;
}

message PingRequest {
  required bool ping = 1;
}

message PingResponse {
   required bool pong = 1;
}