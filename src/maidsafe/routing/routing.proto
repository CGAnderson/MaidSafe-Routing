package maidsafe.routing.protobuf;

message Layer {
  required int32 identifier = 1;
  required bytes message = 2;
}

message Endpoint {
  required bytes ip = 1;
  required int32 port = 2;
}

enum NatType {
  kSymmetric = 0;
  kOther = 1;
  kUnknown = 2;
}

message Contact {
  required bytes node_id = 1;
  required bytes connection_id = 2;
  required Endpoint private_endpoint = 3;
  required Endpoint public_endpoint = 4;
  optional NatType nat_type = 5;
  optional bool tcp = 6;
}

message ConfigFile {
  optional bytes node_id = 1;
  optional bytes private_key = 2;
}

message BootstrapContacts {
  required bytes node_id = 1;
  required bytes public_key = 2;
  required Endpoint public_endpoint = 3;
  required Endpoint private_endpoint = 4;
}

// contacts file
message Bootstrap {
  repeated Endpoint bootstrap_contacts = 1;
}

// Message wrappers


message Message {
  optional bytes source_id = 1;
  optional bytes destination_id = 2;
  required bool routing_message = 3;
  optional bytes last_id = 4;
  optional bytes relay_id = 5;
  repeated bytes data = 6; // serialised protobuf - possibly encrypted
  optional bytes signature = 7;
  required bool direct = 8;
  optional int32 replication = 9;
  optional sint32 type = 10; // type of data - used in signal to upper layers
  optional bool cacheable = 11;
  optional int32 id = 12;
  required bool client_node = 13;
  optional bytes relay_connection_id = 14;
  optional bool closest_to_this_node = 15;
  optional bool close_to_this_node = 16;
  repeated bytes route_history = 17;
  required bool request = 18;
  optional bytes group_claim = 19;
  optional int32 hops_to_live = 20;
  optional bool visited = 21;
}

message SignedMessage {
  required bytes message = 1; // serialised Message
  required bytes signature = 2;
  required bytes id = 3;
}

message ConnectRequest {
  required Contact contact = 1;
  required bytes peer_id = 2;
  optional bool bootstrap = 3;
  required int32 timestamp = 4;
}

message ConnectResponse {
  required ConnectResponseType answer = 1;
  optional Contact contact = 2;
  optional bytes connection_id = 3;
  optional Endpoint seen_endpoint = 4;
  required int32 timestamp = 5;
  required bytes original_request = 6;
  required bytes original_signature = 7;
}

message ConnectSuccess {
  required bytes node_id = 1;
  required bytes connection_id = 2;
  required bool requestor = 3;
}

message ConnectSuccessAcknowledgement {
  required bytes node_id = 1;
  required bytes connection_id = 2;
  repeated bytes close_ids = 3;
  required bool requestor = 4;
}

message FindNodesRequest {
  required int32 num_nodes_requested = 1;
  required bytes target_node = 2;
  required int32 timestamp = 3;
}

message FindNodesResponse {
  repeated bytes nodes = 1;
  required int32 timestamp = 2;
  required bytes original_request = 3;
  required bytes original_signature = 4;
}

message PingRequest {
  required bool ping = 1;
  required int32 timestamp = 2;
}

message PingResponse {
  required bool pong = 1;
  required int32 timestamp = 2;
  required bytes original_request = 3;
  required bytes original_signature = 4;
}

message RemoveRequest {
  required bytes peer_id = 1;
  repeated bytes attempted_nodes = 2;
}

message RemoveResponse {
  required bool success = 1;
  required bytes peer_id = 2;
  required bytes original_request = 3;
}

enum ConnectResponseType {
  kAccepted = 0;
  kRejected = 1;
  kConnectAttemptAlreadyRunning = 2;
}

message FobList {
  message Fob {
    required bytes fob = 1;
  }
  repeated Fob fobs = 1;
}

message NodeIdList {
  message NodeId {
    required bytes node_id = 1;
  }
  repeated NodeId node_id_list = 1;
}

message BasicNodeInfo {
  required bytes node_id = 1;
  required int32 rank = 2;
}

message ClosestNodesUpdate {
  required bytes node = 1;
  repeated BasicNodeInfo nodes_info = 2;
}

message ClosestNodesUpdateSubscrirbe {
  required bytes peer = 1;
  required bool unsubscribe = 2;
}
