package maidsafe.routing.protobuf;

message Layer {
  required int32 identifier = 1;
  required bytes message = 2;
}

message Endpoint {
  required bytes ip = 1;
  required int32 port = 2;
}

message Contact {
  required bytes node_id = 1;
  required Endpoint private_endpoint = 2;
  required Endpoint public_endpoint = 3;
  optional bool tcp = 4;
}

message ConfigFile {
  optional bytes node_id = 1;
  optional bytes private_key = 2;
}

message BootstrapContacts {
  required bytes node_id = 1;
  required bytes public_key = 2;
  required Endpoint public_endpoint = 3;
  required Endpoint private_endpoint = 4;
}

// contacts file
message Bootstrap {
  repeated Endpoint bootstrap_contacts = 1;
}

// Message wrappers


message Message {
  optional bytes source_id = 1; // in response this is name of data
  optional bytes destination_id = 2;
  required bool routing_message = 3;
  optional bytes last_id = 4;
  optional bytes relay_id = 5;
  repeated bytes data = 6; // serialised protobuf - possibly encrypted
  optional bytes signature = 7;
  required bool direct = 8;
  optional int32 replication = 9;
  optional sint32 type = 10; // type of data - used in signal to upper layers
  optional bool cacheable = 11;
  optional int32 id = 12;
  required bool client_node = 13;
  optional Endpoint relay = 14;
  optional bool closest_to_this_node = 15;
  optional bool close_to_this_node = 16;
  repeated bytes route_history = 17;
  required bool request = 18;
  optional bytes group_claim = 19;

}

message SignedMessage {
  required bytes message = 1; // serialised Message
  required bytes signature = 2;
  required bytes id = 3;
}

message ConnectRequest {
  required Contact contact = 1;
  optional bool bootstrap = 2;
  required int32 timestamp = 3;
  repeated bytes closest_id = 4;
}

message ConnectResponse {
  required bool answer = 1;
  optional Contact contact = 2;
  optional Endpoint seen_endpoint = 3;
  required int32 timestamp = 4;
  required bytes original_request = 5;
  required bytes original_signature = 6;
  repeated bytes closer_id = 7;
}

message ConnectSuccess {
  required bytes node_id = 1;
  required Endpoint endpoint = 2;
}

message FindNodesRequest {
  required int32 num_nodes_requested = 1;
  required bytes target_node = 2;
  required int32 timestamp = 3;
}

message FindNodesResponse {
  repeated bytes nodes = 1;
  required int32 timestamp = 2;
  required bytes original_request = 3;
  required bytes original_signature = 4;
}

message PingRequest {
  required bool ping = 1;
  required int32 timestamp = 2;
}

message PingResponse {
  required bool pong = 1;
  required int32 timestamp = 2;
  required bytes original_request = 3;
  required bytes original_signature = 4;
}

enum ProxyConnectResultType {
  kSuccess = 0;
  kFailure = 1;
  kAlreadyConnected = 2;
}

message ProxyConnectRequest {
  required Endpoint local_endpoint = 1;
  required Endpoint external_endpoint = 2;
}

message ProxyConnectResponse {
  required ProxyConnectResultType result = 1;
}
